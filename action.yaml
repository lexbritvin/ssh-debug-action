name: 'SSH Session'
description: '🛠️ Connect to runners via SSH through jump host or tunneling solutions. Supports Windows, macOS, Linux. VS Code Remote.'

branding:
  icon: 'server'
  color: 'blue'

# =============================================================================
# INPUT PARAMETERS
# =============================================================================
inputs:
  # SSH Server Configuration
  ssh-server-host:
    required: false
    description: |
      SSH server hostname or IP address for client connections.
      When left empty, this will be automatically determined:
      1. If `ssh-jump-forward` is `:generate`, a hostname will be generated by this action for use on the jump host
      2. If the jump host provides a direct connection hostname or IP, that will be used
      3. Otherwise defaults to 'localhost' for direct connections.
      
      Note: Not all jump host SSH servers support hostname aliases in port forwarding.
      If unsupported, use `ssh-jump-forward: '0'` for random port assignment. 
      See `ssh-jump-forward`.
    default: ''

  ssh-server-port:
    description: 'SSH server port'
    required: false
    default: '2222'

  ssh-server-user:
    description: 'SSH username for the server and authorized keys. Use :current to get the current user name'
    required: false
    default: ':current'

  ssh-server-authorized-keys:
    description: 'Authorized public keys (one per line) for SSH Server authentication'
    required: false

  # Jump Host Configuration
  ssh-jump-host:
    required: false
    default: ''
    description: 'SSH jump host server for tunneling SSH server access'

  ssh-jump-port:
    required: false
    default: '22'
    description: 'SSH jump host port for tunneling SSH server access'

  ssh-jump-user:
    required: false
    default: ''
    description: 'SSH jump host username. Use :generate to create a unique username automatically. See `ssh-jump-forward` parameter.'

  ssh-jump-forward:
    required: false
    description: |
      Port forwarding configuration for jump host:
      - '0' for random port and public access (serveo.net, pinggy.io, or arbitrary server)
      - ':generate' to use a generated host alias (Public SSH jump hosts like ssh-j.com, serveo.net)
      - Custom format like `2222` or `myhost:2222` for specific host and port
      - Empty to disable jump host when other connection methods are available
    default: ''

  ssh-jump-private-key:
    required: false
    default: ''
    description: 'Private key content for authenticating with the SSH jump host'

  ssh-jump-private-key-path:
    required: false
    default: ''
    description: 'Private key path for authenticating with the SSH jump host'

  ssh-jump-host-keys:
    required: false
    description: 'SSH host keys for jump server verification (known_hosts format)'
    default: ''

  ssh-jump-extra-flags:
    description: 'Additional SSH flags for jump host connection'
    required: false
    default: ''

  # Authentication & Security
  use-actor-ssh-keys:
    description: 'Whether to authorize the public SSH keys of the user triggering the workflow'
    required: false
    default: 'false'

  # Session Management
  wait-file:
    description: 'File path to monitor for session termination (create this file to end the session)'
    required: false
    default: './end-session'

  wait-timeout:
    description: 'Maximum session duration in seconds before automatic termination'
    required: false
    default: '1800'

  detached:
    description: |
      Run SSH session in background (non-blocking mode).
      The wait process runs in a post-job script within the same job.
      
      USE CASES:
      • Execute additional workflow steps while SSH session is active
      • Send notifications (Slack, email, webhooks) with connection details
      • Add extra information to help message
    required: false
    default: 'false'

  display-help-message:
    description: 'Whether to display connection instructions and help message in the logs'
    required: false
    default: 'true'

# =============================================================================
# OUTPUT PARAMETERS
# =============================================================================
outputs:
  # Connection Details
  ssh-host:
    description: 'SSH server hostname or IP address for connection'
    value: ${{ steps.conn.outputs.ssh-host }}
  ssh-port:
    description: 'SSH server port number for connection'
    value: ${{ steps.conn.outputs.ssh-port }}
  ssh-user:
    description: 'SSH username for authentication'
    value: ${{ steps.conn.outputs.ssh-user }}
  
  # Jump Host Details
  ssh-jump-host:
    description: 'SSH jump host hostname (if used)'
    value: ${{ steps.conn.outputs.ssh-jump-host }}
  ssh-jump-port:
    description: 'SSH jump host port number (if used)'
    value: ${{ steps.conn.outputs.ssh-jump-port }}
  ssh-jump-user:
    description: 'SSH jump host username (if used)'
    value: ${{ steps.conn.outputs.ssh-jump-user }}
  
  # Security & Connection Info
  ssh-host-keys:
    description: 'SSH server host keys for client verification'
    value: ${{ steps.ssh-server.outputs.host-keys }}
  ssh-command:
    description: 'Complete SSH command ready to use for connecting to the server'
    value: ${{ steps.conn.outputs.ssh-command }}
  help-message:
    description: 'Formatted help message with connection instructions and usage tips'
    value: ${{ steps.help.outputs.help-message }}

# =============================================================================
# WORKFLOW STEPS
# =============================================================================
runs:
  using: 'composite'
  steps:
    # Step 1: Input Validation
    - name: 🔍 Validate Configuration
      shell: bash
      env:
        INPUT_SSH_HOST: "${{ inputs.ssh-server-host }}"
        INPUT_SSH_JUMP_FORWARD: "${{ inputs.ssh-jump-forward }}"
      run: |
        echo "🔍 Validating SSH configuration parameters..."
        
        # Ensure at least one connection method is specified
        if [[ -z "$INPUT_SSH_JUMP_FORWARD" && -z "$INPUT_SSH_HOST" ]]; then
          echo "❌ Configuration Error: Must specify either 'ssh-server-host' or 'ssh-jump-forward'"
          echo "💡 Tip: Use 'ssh-jump-forward: :generate' for auto-generated tunneling"
          exit 1
        fi
        
        echo "✅ Configuration validation passed"

    # Step 2: SSH Server Setup
    - name: 🚀 Configure SSH Server
      id: ssh-server
      uses: lexbritvin/ssh-server-action@v1
      with:
        user: ${{ inputs.ssh-server-user }}
        port: ${{ inputs.ssh-server-port }}
        authorized-keys: ${{ inputs.ssh-server-authorized-keys }}
        use-actor-ssh-keys: ${{ inputs.use-actor-ssh-keys }}

    # Step 3: Connection Configuration
    - name: ⚙️ Prepare SSH Connection
      id: ssh-conf
      shell: bash
      env:
        INPUT_SSH_HOST: "${{ inputs.ssh-server-host }}"
        INPUT_SSH_JUMP_FORWARD: "${{ inputs.ssh-jump-forward }}"
        SSH_JUMP_HOST: ${{ inputs.ssh-jump-host }}
        SSH_JUMP_PORT: ${{ inputs.ssh-jump-port }}
        SSH_JUMP_USER: ${{ inputs.ssh-jump-user }}
        SSH_LOCAL_HOST: ${{ steps.ssh-server.outputs.hostname }}
        SSH_LOCAL_PORT: ${{ steps.ssh-server.outputs.port }}
      run: |
        echo "⚙️ Configuring SSH connection parameters..."
        
        # Generate unique identifiers for SSH connections
        SSH_REMOTE_FORWARDS=""
        GEN_SSH_ALIAS="gh-runner-${{ github.job }}-${{ github.run_id }}-$RANDOM"
        GEN_SSH_USER="$GEN_SSH_ALIAS"
        
        # Configure jump host settings based on ssh-jump-forward parameter
        SSH_HOST="$INPUT_SSH_HOST"
        
        if [[ -z "$INPUT_SSH_JUMP_FORWARD" ]]; then
          echo "🔗 Direct connection mode (no jump host)"
          SSH_JUMP_HOST=""
          SSH_JUMP_PORT=""
          SSH_JUMP_USER=""
        elif [[ "$INPUT_SSH_JUMP_FORWARD" == ":generate" ]]; then
          echo "🎯 Auto-generated jump host configuration"
          SSH_HOST="${SSH_HOST:-$GEN_SSH_ALIAS}"
          SSH_REMOTE_FORWARDS="$SSH_HOST:$SSH_LOCAL_PORT:$SSH_LOCAL_HOST:$SSH_LOCAL_PORT"
        else
          echo "🔀 Custom jump host forwarding: $INPUT_SSH_JUMP_FORWARD"
          SSH_REMOTE_FORWARDS="$INPUT_SSH_JUMP_FORWARD:$SSH_LOCAL_HOST:$SSH_LOCAL_PORT"
        fi
        
        # Generate jump user if requested
        if [[ "$SSH_JUMP_USER" == ":generate" ]]; then
          SSH_JUMP_USER="$GEN_SSH_USER"
          echo "👤 Generated jump user: $SSH_JUMP_USER"
        fi
        
        # Set default host alias
        SSH_HOST=${SSH_HOST:-localhost}
        echo "🏷️ Using hostname: $SSH_HOST"

        # Export configuration to GitHub outputs
        {
          echo "ssh-host=$SSH_HOST"
          echo "ssh-jump-host=$SSH_JUMP_HOST"
          echo "ssh-jump-port=$SSH_JUMP_PORT"
          echo "ssh-jump-user=$SSH_JUMP_USER"
          echo "ssh-remote-forwards=$SSH_REMOTE_FORWARDS"
        } >> $GITHUB_OUTPUT
        
        echo "✅ SSH connection configuration completed"

    # Step 4: Jump Host Tunneling (Conditional)
    - name: 🌉 Setup Jump Host Tunnel
      id: tun
      uses: lexbritvin/ssh-action@v1
      if: ${{ !!steps.ssh-conf.outputs.ssh-jump-host }}
      with:
        host: ${{ steps.ssh-conf.outputs.ssh-jump-host }}
        port: ${{ steps.ssh-conf.outputs.ssh-jump-port }}
        username: ${{ steps.ssh-conf.outputs.ssh-jump-user }}
        private-key: ${{ inputs.ssh-jump-private-key }}
        private-key-path: ${{ inputs.ssh-jump-private-key-path }}
        remote-forwards: "${{ steps.ssh-conf.outputs.ssh-remote-forwards }}"
        extra-flags: "${{ inputs.ssh-jump-extra-flags }}"
        known-hosts: ${{ inputs.ssh-jump-host-keys }}

    # Step 5: Connection Command Generation
    - name: 🔗 Generate SSH Connection Command
      id: conn
      shell: bash
      env:
        ALLOCATED_HOST: ${{ steps.tun.outputs.allocated-host }}
        ALLOCATED_PORT: ${{ steps.tun.outputs.allocated-port }}
        SSH_HOST: "${{ steps.ssh-conf.outputs.ssh-host }}"
        SSH_PORT: "${{ steps.ssh-server.outputs.port }}"
        SSH_USER: "${{ steps.ssh-server.outputs.username }}"
        SSH_JUMP_HOST: "${{ steps.ssh-conf.outputs.ssh-jump-host }}"
        SSH_JUMP_PORT: "${{ steps.ssh-conf.outputs.ssh-jump-port }}"
        SSH_JUMP_USER: "${{ steps.ssh-conf.outputs.ssh-jump-user }}"
      run: |
        echo "🔗 Building SSH connection command..."
        
        # Initialize SSH parameters
        SSH_PARAMS=""
        
        # Use allocated port/host from tunnel if available
        if [[ -n "$ALLOCATED_PORT" ]]; then
          SSH_PORT="$ALLOCATED_PORT"
          echo "🔌 Using allocated port: $SSH_PORT"
        fi
        
        if [[ -n "$ALLOCATED_HOST" ]]; then
          SSH_HOST="$ALLOCATED_HOST"
          SSH_JUMP_HOST=""
          SSH_JUMP_PORT=""
          SSH_JUMP_USER=""
          echo "🌐 Using allocated host: $SSH_HOST"
        fi
        
        # Configure jump host proxy if specified
        if [[ -n "$SSH_JUMP_HOST" ]]; then
          SSH_JUMP="$SSH_JUMP_HOST:$SSH_JUMP_PORT"
          [[ -n "$SSH_JUMP_USER" ]] && SSH_JUMP="$SSH_JUMP_USER@$SSH_JUMP"
          SSH_PARAMS="$SSH_PARAMS -J $SSH_JUMP"
          echo "🌉 Jump host configured: $SSH_JUMP"
        fi
        
        # Add custom SSH port if not default
        if [[ "$SSH_PORT" != "22" ]]; then
          SSH_PARAMS="$SSH_PARAMS -p $SSH_PORT"
          echo "🔌 Custom port: $SSH_PORT"
        fi
        
        # Configure SSH login target
        SSH_LOGIN="$SSH_HOST"
        [[ -n "$SSH_USER" ]] && SSH_LOGIN="$SSH_USER@$SSH_HOST"
        echo "👤 SSH target: $SSH_LOGIN"

        # Build complete SSH command
        SSH_PARAMS="$SSH_PARAMS $SSH_LOGIN"
        SSH_CMD="ssh $SSH_PARAMS"

        # Add Windows-specific terminal configuration
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Request TTY explicitly on Windows server
          SSH_CMD="$SSH_CMD -t powershell"
          echo "🪟 Windows PowerShell terminal configured"
        fi
        
        echo "🎯 Final SSH command: $SSH_CMD"
        
        # Export outputs
        {
          echo "ssh-params=$SSH_PARAMS"
          echo "ssh-command=$SSH_CMD"
          echo "ssh-host=$SSH_HOST"
          echo "ssh-port=$SSH_PORT"
          echo "ssh-user=$SSH_USER"
          echo "ssh-jump-host=$SSH_JUMP_HOST"
          echo "ssh-jump-port=$SSH_JUMP_PORT"
          echo "ssh-jump-user=$SSH_JUMP_USER"
        } >> $GITHUB_OUTPUT
        
        echo "✅ SSH connection command generated successfully"

    # Step 6: Help Message Generation
    - name: 📖 Generate Connection Guide
      shell: bash
      id: help
      env:
        SSH_CMD: ${{ steps.conn.outputs.ssh-command }}
        SSH_PARAMS: ${{ steps.conn.outputs.ssh-params }}
        SSH_HOST_KEYS: ${{ steps.ssh-server.outputs.host-keys }}
        INPUT_WAIT_TIMEOUT: ${{ inputs.wait-timeout }}
        INPUT_WAIT_FILE: ${{ inputs.wait-file }}
        INPUT_DISPLAY_HELP: ${{ inputs.display-help-message }}
      run: |
        echo "📖 Generating connection guide and help message..."
        
        # Prepare cross-platform working directory path
        WORKING_DIR="$(cygpath -w "$(pwd)" 2>/dev/null | sed 's/\\/\\\\/g' || echo "$(pwd)")"
        WAIT_FILE="$(cygpath -w "$INPUT_WAIT_FILE" 2>/dev/null | sed 's/\\/\\\\/g' || echo "$INPUT_WAIT_FILE")"
        
        # Convert timeout from seconds to minutes for user display
        TIMEOUT_MIN=$(( INPUT_WAIT_TIMEOUT / 60 ))
        
        # Generate comprehensive help message with beautiful ANSI styling
        HELP_MESSAGE=$(cat << HELP_EOF
        ╔══════════════════════════════════════════════════════════════════════════════════════════╗
                                       🚀 SSH SESSION ACTIVE 🚀                                   
        ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        
        \033[1;32m┌─ 🎯 QUICK START\033[0m
        \033[1;32m│\033[0m   \033[1m$SSH_CMD\033[0m
        \033[1;32m│\033[0m   \033[1mcd "$WORKING_DIR"\033[0m
        \033[1;32m└─\033[0m
        
        \033[1;31m┌─ 🛑 END SESSION\033[0m
        \033[1;31m│\033[0m   \033[1;33mCreate file:\033[0m \033[1;34m$WAIT_FILE\033[0m
        \033[1;31m│\033[0m   \033[1;36mBash:\033[0m       \033[1mcd "$WORKING_DIR" && touch "$WAIT_FILE"\033[0m
        \033[1;31m│\033[0m   \033[1;35mPowerShell:\033[0m \033[1mSet-Location "$WORKING_DIR"; New-Item -ItemType File -Name "$WAIT_FILE" -Force\033[0m
        \033[1;31m│\033[0m   \033[1;33mOR:\033[0m Cancel workflow in GitHub UI
        \033[1;31m└─\033[0m
        
        \033[1;33m┌─ ⚠️  SESSION INFO\033[0m
        \033[1;33m│\033[0m   \033[1;36mAuthentication:\033[0m GitHub SSH keys + authorized-keys
        \033[1;33m│\033[0m   \033[1;36mMax Duration:\033[0m   \033[1;34m$TIMEOUT_MIN minutes\033[0m
        \033[1;33m│\033[0m   \033[1;36mNote:\033[0m           Changes are temporary (lost when session ends)
        \033[1;33m└─\033[0m
        
        \033[1;35m┌─ 🔑 SSH HOST KEYS\033[0m
        \033[1;35m│\033[0m   ${SSH_HOST_KEYS//$'\n'/$'\n'\\033[1;35m│\\033[0m   }
        \033[1;35m└─\033[0m
        
        ╔══════════════════════════════════════════════════════════════════════════════════════════╗
                                      💻 CONNECTION OPTIONS 
        ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        
        \033[1;34m🔹 1️⃣  Terminal Access\033[0m
            \033[1m$SSH_CMD\033[0m
            \033[1mcd "$WORKING_DIR"\033[0m
        
        \033[1;34m🔹 2️⃣  Custom Private Key\033[0m
            \033[1mssh -i /path/to/private-key $SSH_PARAMS\033[0m
        
        \033[1;34m🔹 3️⃣  Port Forwarding (Background)\033[0m
            \033[1mssh -L 3000:localhost:8080 $SSH_PARAMS -N -T\033[0m
        
        \033[1;34m🔹 4️⃣  VS Code Remote Development\033[0m
            \033[1;36m•\033[0m Install \033[1;34m"Remote - SSH"\033[0m extension
            \033[1;36m•\033[0m Open Command Palette ("Ctrl+Shift+P" or "Cmd+Shift+P" on MacOS) → \033[1;34m"Remote-SSH: Add New SSH Host..."\033[0m
            \033[1;36m•\033[0m Enter: \033[1;34m$SSH_CMD\033[0m
            \033[1;36m•\033[0m Click \033[1;34m"Connect"[0m in the popup or using \033[1;34m"Remote-SSH: Connect to Host..."[0m
            \033[1;36m•\033[0m Open: \033[1;34m$WORKING_DIR\033[0m
        
        \033[1;35m💡 Pro Tip:\033[0m Use VS Code\'s integrated terminal and port forwarding on the remote host.
        
        ╔══════════════════════════════════════════════════════════════════════════════════════════╗
                                         🎉 Happy Coding! 💻✨
        ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        HELP_EOF
        )
        
        # Export help message to outputs (GitHub Actions multiline format)
        {
          echo "help-message<<EOF"
          echo "$HELP_MESSAGE"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        # Display help message if enabled
        if [[ "$INPUT_DISPLAY_HELP" == "true" ]]; then
          echo "📖 Displaying connection guide:"
          printf "%b\n" "$HELP_MESSAGE"
        fi
        
        echo "✅ Connection guide generated successfully"

    # Step 7: Session Wait Process
    - name: 🔄 Wait for Session Completion
      uses: lexbritvin/wait-action@v1
      if: ${{ inputs.wait-file != '' }}
      with:
        condition-type: 'file'
        file-path: ${{ inputs.wait-file }}
        timeout-seconds: ${{ inputs.wait-timeout }}
        poll-interval-seconds: '60'
        detached: ${{ inputs.detached }}
